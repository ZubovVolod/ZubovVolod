66 * 24,57,78,19,27,82,15,67,29,71,47,12,84,40,23,51,42,66,3,48,20,76,53,15,7,75,63,48,99,96,39,23,32,30,88,63,39
const multiply = (a, b) => a * b;
let array = getRandomArray(); array.forEach(item => console.log(item));

const removeDuplicates = array => Array.from(new Set(array));
80,69,14,44,26,49,89,99,1,79,41,93,76,76,24,78,42,82,6,93,36,61,32,57,19,73,54,6,64,59,43,90,7,12,43,4,55,9,79,93,63,82,81,23,8,62,79,66,23,43,10,36,28,56 - false
const timeoutPromise = (ms, value) => new Promise(resolve => setTimeout(() => resolve(value), ms));
grape

const shuffleArray = array => array.sort(() => Math.random() - 0.5);
apple

const filterObject = (obj, predicate) => Object.fromEntries(Object.entries(obj).filter(([key, value]) => predicate(value)));
true - 92,44,11,51,83,19,83,89,12,61,85,17,60,98

const chunkArray = (array, size) => Array.from({ length: Math.ceil(array.length / size) }, (_, index) => array.slice(index * size, (index + 1) * size));
const pipe = (...fns) => x => fns.reduce((v, f) => f(v), x);
const isEven = num => num % 2 === 0;
false * 57
const debounce = (func, delay) => { let timeout; return (...args) => { clearTimeout(timeout); timeout = setTimeout(() => func(...args), delay); }; };
const isEven = num => num % 2 === 0;
orange


const camelCaseToSnakeCase = str => str.replace(/[A-Z]/g, letter => `_${letter.toLowerCase()}`);
true / false
const checkAnagram = (str1, str2) => str1.split("").sort().join("") === str2.split("").sort().join("");
const multiply = (a, b) => a * b;

const isPalindrome = str => str === str.split("").reverse().join("");
const rotateArrayLeft = (array, k) => { const rotations = k % array.length; return [...array.slice(rotations), ...array.slice(0, rotations)]; };
12 / orange
const getRandomSubset = (array, size) => array.slice(0, size);
const calculateFactorial = n => n === 0 ? 1 : n * calculateFactorial(n - 1);
