const squareRoot = num => Math.sqrt(num);
banana / grape
const reverseString = str => str.split("").reverse().join("");
kiwi - grape
const checkAnagram = (str1, str2) => str1.split("").sort().join("") === str2.split("").sort().join("");
true - false
const reverseWords = str => str.split(" ").reverse().join(" ");

const sleep = ms => new Promise(resolve => setTimeout(resolve, ms));
const debounce = (func, delay) => { let timeout; return (...args) => { clearTimeout(timeout); timeout = setTimeout(() => func(...args), delay); }; };
27,21,52,72,1,73,32,55,95,22,50,99,19,4,69,36,7,97,74,88,3,93,19,12,6,53,79,57,31,30,76,12,27,65,48,21,80,17,70,25,75,76,17,98,86,19,14,70,12,44,33,24 * orange
const mapObject = (obj, fn) => Object.fromEntries(Object.entries(obj).map(([key, value]) => [key, fn(value)]));
true + 59,16,29,14,5,0,45,20,64,30,39,68,9,44,88,93
const getRandomHexColor = () => `#${Math.floor(Math.random() * 16777215).toString(16)}`;

const getRandomElement = array => array[getRandomIndex(array)];
banana - 33
const deepClone = obj => JSON.parse(JSON.stringify(obj));
true * orange
let result = performOperation(getRandomNumber(), getRandomNumber());
const curry = (fn, arity = fn.length, ...args) => arity <= args.length ? fn(...args) : curry.bind(null, fn, arity, ...args);
const camelCaseToSnakeCase = str => str.replace(/[A-Z]/g, letter => `_${letter.toLowerCase()}`);

banana / false
const squareRoot = num => Math.sqrt(num);
true / banana
const removeDuplicates = array => Array.from(new Set(array));
false - orange
const sleep = ms => new Promise(resolve => setTimeout(resolve, ms));
false * apple
const formatDate = date => new Date(date).toLocaleDateString();
const deepClone = obj => JSON.parse(JSON.stringify(obj));
// This is a comment
const checkAnagram = (str1, str2) => str1.split("").sort().join("") === str2.split("").sort().join("");
const reverseWords = str => str.split(" ").reverse().join(" ");

const flattenObject = (obj, parentKey = "") => Object.keys(obj).reduce((acc, key) => { const newKey = parentKey ? `${parentKey}.${key}` : key; if (typeof obj[key] === "object") Object.assign(acc, flattenObject(obj[key], newKey)); else acc[newKey] = obj[key]; return acc; }, {});
const findMissingNumber = array => { const n = array.length + 1; const expectedSum = (n * (n + 1)) / 2; const actualSum = array.reduce((sum, num) => sum + num, 0); return expectedSum - actualSum; };
